---
title: "STAT 211: Normal Distribution"
subtitle: "Computing probabilities and quantiles from this important distribution"
---

```{r loadPacks}
#| echo: false
require(ggplot2)
```

# The Normal Distribution

## Defining the normal distribution

The [normal]{.definition} (also known as 'Gaussian') is $X\sim N(\mu,\sigma^2)$:

-   $\mu$ is the expected value ($E[X]$)
-   $\sigma^2$ is the variance of ($Var[X]$)

Its pdf:

$$ 
f(x)=\frac1{(2\pi\sigma^2)^{1/2}}e^{-\frac{(x-\mu)^2}{2\sigma^2}} 
$$

[(Just like the binomial, you don't need to know this formula for this class)]{.subscript}

## Computing probabilities: old vs. new 

Computing probabilities with the normal **requires** computers

:::::: columns
::: {.column width="50%"}

In times of yore, this meant using tables:

![](figures/normalTable.png){width="350%" fig-alt="Standard Normal Table for getting probabilities from Z-scores"}
:::
::: {.column width="50%"}

Now, we can just use a computer:

```{r}
#| echo: true
pnorm(1.8,0,1)
pnorm(1.89,0,1)
```

:::
::::::

# Computing Probabilities and Values

## Computing probabilities


We will always write $X\sim N(\mu,\sigma^2)$ for the normal

R syntax will be specified with $\mu$ and $\sigma = \sqrt{\sigma^2}$ instead

[Example]{.example}

If $X \sim N(5,9)$, then the probability $X$ is less than 4 is:

``` {.r code-line-numbers="1|2-3|4"}
x       = 4
mu      = 5
sigmaSq = 9
pnorm(x, mu, sqrt(sigmaSq))
```

```{r introNormalProb}
#| echo: false
x       = 4
mu      = 5
sigmaSq = 9
pnorm(x, mu, sqrt(sigmaSq))
```

## Computing values (quantiles) 


Continuing with $X \sim N(5,9)$:

[(that is, normal with expected value 5 and variance 9)]{.subscript}

:::{.scrolling}


:::::: columns
::: {.column width="50%"}

[Recall:]{.example} 

For a value $x = 4$, $P(X \leq 4)$:

```{r}
#| echo: true
pnorm(4,5,3)
```


:::

::: {.column width="50%"}

```{r}
#| label: normalProbPlot
#| echo: false
#| fig-asp: 1
#| out-width: "100%" 
x       = 4
mu      = 5
sigmaSq = 9
lab     = 'x'

funcShaded <- function(x, lower_bound) {
    y = dnorm(x, mean = mu, sd = sqrt(sigmaSq))
    y[x >= lower_bound] <- NA
    return(y)
}

xMin = mu - sqrt(sigmaSq)*4
xMax = mu + sqrt(sigmaSq)*4
ggplot(data.frame(x = c(xMin, xMax)), aes(x = x)) + 
    stat_function(fun = dnorm, args = list(mean = mu, sd = sqrt(sigmaSq))) + 
    stat_function(fun = funcShaded, args = list(lower_bound = x), 
                  geom = "area", fill = 'lightblue', alpha = .5) +
    scale_x_continuous(name = lab) + scale_y_continuous(name = "f(x)")
```


:::
::::::


Now, let's ask the **opposite** question!

For a fixed probability $p$, what is the value $x$ so that $P(X \leq x) = p$?

This value is called a [quantile]{.definition}


:::::: columns
::: {.column width="50%"}

[Example:]{.example} 

What $x$ makes $P(X\leq x) = .7$?

```{r}
#| echo: true
qnorm(.7,5,3)
```
:::

::: {.column width="50%"}

```{r}
#| label: normalQuantilePlot
#| echo: false
#| fig-asp: 1
#| out-width: "100%" 
x   = qnorm(.7,mu,sqrt(sigmaSq))
lab = 'x' 

funcShaded <- function(x, lower_bound) {
    y = dnorm(x, mean = mu, sd = sqrt(sigmaSq))
    y[x >= lower_bound] <- NA
    return(y)
}

xMin = mu - sqrt(sigmaSq)*4
xMax = mu + sqrt(sigmaSq)*4
ggplot(data.frame(x = c(xMin, xMax)), aes(x = x)) + 
    stat_function(fun = dnorm, args = list(mean = mu, sd = sqrt(sigmaSq))) + 
    stat_function(fun = funcShaded, args = list(lower_bound = x), 
                  geom = "area", fill = 'lightblue', alpha = .5) +
    scale_x_continuous(name = lab) + scale_y_continuous(name = "f(x)")
```

:::
::::::



:::

## Using pnorm and qnorm 

[Concept Check:]{.example} What would each of the following codes produce?

```{r}
#| echo: true
#| eval: false
qnorm( pnorm(3,5,3), 5, 3)
```

. . .

```{r}
#| echo: false
#| eval: true
qnorm( pnorm(3,5,3), 5, 3)
```

. . .

```{r}
#| echo: true
#| eval: false
pnorm( qnorm(.2,5,3), 5, 3)
```

. . .

```{r}
#| echo: false
#| eval: true
pnorm( qnorm(.2,5,3), 5, 3)
```

## Computing probabilities and values 

Suppose $X \sim N(-3.2, 100)$

[that is, normal with expected value -3.2 and variance 100]{.subscript}

[Probability:]{.smallCap} What is the probability $X$ equals 0?

. . .

This is always zero!

. . .

[Probability:]{.smallCap} What is the probability $X$ is less than 0?

. . .

```{r}
#| echo: true
pnorm(0,-3.2,sqrt(100))
```

. . .

[Values:]{.smallCap} at what value $x$ does $P(X\leq x) = .05$?

. . .

```{r}
#| echo: true
qnorm(.05,-3.2,sqrt(100))
```

## Computing probabilities: SATs



[Example]{.example}

The scores on the SAT math section are $X \sim N(520,3600)$

:::{.scrolling}

[(that is, normal with expected value 520 and variance 3600)]{.subscript}

What is the probability someone scores less than 600?


::: {.fragment}
$P(X \leq 600) = \text{what probability?}$
:::

::: {.fragment}
:::::: columns
::: {.column width="52%"}

```{r SATprobEcho}
#| echo: true
x       = 600
mu      = 520
sigmaSq = 3600
pnorm(x, mu, sqrt(sigmaSq))
```

:::
::: {.column width="48%"}


```{r}
#| label: SATprobabilityNoEcho
#| echo: false
#| fig-asp: 1
#| out-width: "120%" 
x       = 600
mu      = 520
sigmaSq = 3600

funcShaded <- function(x, lower_bound) {
    y = dnorm(x, mean = mu, sd = sqrt(sigmaSq))
    y[x >= lower_bound] <- NA
    return(y)
}

xMin = mu - sqrt(sigmaSq)*4
xMax = mu + sqrt(sigmaSq)*4
ggplot(data.frame(x = c(xMin, xMax)), aes(x = x)) + 
    stat_function(fun = dnorm, args = list(mean = mu, sd = sqrt(sigmaSq))) + 
    stat_function(fun = funcShaded, args = list(lower_bound = x), 
                  geom = "area", fill = 'lightblue', alpha = .5) +
    scale_x_continuous(name = "Score") + scale_y_continuous(name = "f(x)")
```


:::
::::::
:::
:::
## Computing values: SATs 


[Example]{.example}

The scores on the SAT math section are $X \sim N(520,3600)$

:::{.scrolling}

The stats dept. admits students scoring above $96^{th}$ percentile

What is the cutoff score ($x$) for recruitment by the stats dept.?

::: {.fragment}

$P(X \leq x) = 0.96$

:::

::: {.fragment}

:::::: columns
::: {.column width="52%"}

```{r SATvalueEcho}
#| echo: true
prob    = .96
mu      = 520
sigmaSq = 3600
qnorm(prob, mu, sqrt(sigmaSq))
```

:::

::: {.column width="48%"}
```{r}
#| label: SATvalueNoEcho
#| echo: false
#| fig-asp: 1
#| out-width: "100%" 
x       = qnorm(prob, mu, sqrt(sigmaSq))
mu      = 520
sigmaSq = 3600

funcShaded <- function(x, lower_bound) {
    y = dnorm(x, mean = mu, sd = sqrt(sigmaSq))
    y[x >= lower_bound] <- NA
    return(y)
}

xMin = mu - sqrt(sigmaSq)*4
xMax = mu + sqrt(sigmaSq)*4
ggplot(data.frame(x = c(xMin, xMax)), aes(x = x)) + 
    stat_function(fun = dnorm, args = list(mean = mu, sd = sqrt(sigmaSq))) + 
    stat_function(fun = funcShaded, args = list(lower_bound = x), 
                  geom = "area", fill = 'lightblue', alpha = .5) +
    scale_x_continuous(name = "Score") + scale_y_continuous(name = "f(x)")
```
:::
::::::
:::
:::

```{=html}
<!--
To Future Darren: Put this after we introduce correlation
## Properties of Normal Distribution

A [linear combination]{.definition} comes from 'summing' 'products', like:

$$
3x + 4y + 5z
$$

We can form [linear combinations]{.definition} of rvs too

In particular, any linear combination of Normal rvs is again a Normal:
-->
```

# Transformations

## Transforming Normals: $aX + b$ {#transformingNormals}

Suppose again $X \sim N(\mu, \sigma^2)$

If we multiply/add constants $a,b$ to $X$ to form a new rv $Y$:

$$
Y  = aX + b 
$$

then $Y \sim(a\mu + b, a^2 \sigma^2)$

[(This should remind you of our $E[X]$ and $Var[X]$ results)]{.subscript}

[Example:]{.example}

If $X \sim N(150,100)$ then

$$
Y = 3X + 30 \sim N(480, 900)
$$

## Transforming Normals: inches to cm 





:::{.scrolling}

![](figures/steelRuler.png){width="50%" fig-alt="Measuring to a shoulder on a machined part with a steel rule"}


We are measuring a machined part using a ruler on a .01" scale


If several people measure, they will get some random amount of measurement error:

$$
X \sim N(.875, .00005)
$$

What is the probability that that a measurement will be within $\pm$.01 centimeters?

[(An inch is 2.54 cm)]{.subscript}



$Y = 2.54X$, therefore $Y \sim N(2.54*.875,  2.54^2*.00005) = N(2.2225,  0.00032)$



$$
\begin{align}
P(2.2225 - .01 \leq Y \leq 2.2225 + .01) & = \\
 = P(2.2125 \leq Y \leq 2.2325) & \\
 = F(2.2135) - F(2.2315)
\end{align}
$$ 



```{r transformNormalInchCM}
#| echo: true
mu      = 2.54*.875
sigmaSq = 2.54^2*.00005
pnorm(mu + .01, mu, sqrt(sigmaSq)) - 
    pnorm(mu - .01, mu, sqrt(sigmaSq))
```

:::

## The Standard Normal Distribution 


When $\mu=0$ and $\sigma=1$, we call it the [standard normal]{.definition}

$$
f(x)=\frac1{\sqrt{2\pi}}e^{-x^2/2},\,\,-\infty<x<\infty.
$$

[(Once again, you don't need to know this formula for this class)]{.subscript}

The standard normal will be notated as: $Z \sim N(0,1)$

## Standardization

Going from a general normal to a standard normal is known as [standardization]{.definition}

$$
X \sim N(\mu, \sigma^2) \longrightarrow Z = \frac{X - \mu}{\sigma} \sim N(0,1)
$$


The opposite (actually, the [inverse]{.definition}) is true

$$
Z \sim N(0, 1) \longrightarrow X = Z \sigma + \mu \sim N(\mu,\sigma^2)
$$

[(this is using the results in [Transforming Normals](#transformingNormals))]{.subscript}


# Z-scores: How to compare values
 
## Z-scores: Comparing values 

The [z-score]{.definition} can be computed:

$$
\text{z-score} = \frac{x - \mu}{\sigma}
$$

:::{.scrolling}

[(For a value $x$ from a distribution with mean $\mu$ and variance $\sigma^2$)]{.subscript}

[Question:]{.smallCap} Which of the two values from two different distributions is more [unusual]{.emphasis}?


[Answer:]{.smallCap} Whichever has larger [magnitude]{.emphasis} z-score

[(that is, largest \|z-score\|)]{.subscript}



[Example:]{.example} We want to compare olympic records in men's and women's sprinting. Which is more unusual?

Let's look at a table:

| Category |  Mens | Womens |
|----------|------:|-------:|
| average  |  9.84 |  10.81 |
| variance | .0057 |  .0049 |
| record   |  9.63 |  10.61 |

: Table of Average and Standard Deviation of Olympic Sprinting times.


Let's compute the two [z-scores]{.definition}:

```{r zScoreExample}
#| echo: true
zScoreMen   =  (9.63 - 9.85)/sqrt(.0057)
zScoreWomen =  (10.61 - 10.83)/sqrt(.0049)
```

The z-score for men is `r round(zScoreMen,3)` while for women it is `r round(zScoreWomen,3)`

Hence, the women's result is more unusual:

```{r zScoreExampleConclusion}
#| echo: true
abs(zScoreMen) < abs(zScoreWomen)
```

:::

## Z-scores: Another application

Another usage of [z-scores]{.definition}: what value $x$ would be equally as unusual?

[Answer:]{.smallCap} Choose the $x$ so that the z-scores are [equal]{.emphasis}

:::{.scrolling}



[Example:]{.example} What time would a men's sprinter need to get to be as unusal as the female record?

| Category |  Mens | Womens |
|----------|------:|-------:|
| average  |  9.84 |  10.81 |
| variance | .0057 |  .0049 |
| record   |  9.63 |  10.61 |

: Table of Average and Standard Deviation of Olympic Sprinting times.

We found the female z-score = `r round(zScoreWomen,3)`

$$
\text{z-score}*\sigma  + \mu = x
$$

Here, use

-   z-score from the female sprinters
-   the $\mu$ and $\sigma$ from the male sprinters

```{r zScoreExampleValue}
#| echo: true
x = zScoreWomen * sqrt(.0057) + 9.84
```

The male record would need to be `r round(x,3)` seconds to be as as unusual as the female record.

:::

## Empirical rule {.scrollable}

Values from normal distributions contain predictable amounts of probability

This is the [empirical rule:]{.definition}\]

-   [$P( |Z| \leq 1) = 0.683$]{.lightbluetext} ($\sim \frac{2}{3}$ obs. within 1 $\sigma$)
-   [$P( |Z| \leq 2) = 0.954$]{.lightgreentext} ($\sim \frac{19}{20}$ obs. within 2 $\sigma$)
-   [$P( |Z| \leq 3) = 0.997$]{.lightredtext} ($\sim \frac{99}{100}$ obs. within 3 $\sigma$)

. . .

:::::: columns
::: {.column width="33%"}

```{r}
#| label: normalEmpRuleGeneral1
#| echo: false
#| fig-asp: 1
#| out-width: "100%"

mu      = 0
sigmaSq = 1
lab     = 'x' 

funcShaded <- function(x, lower_bound) {
    y = dnorm(x, mean = mu, sd = sqrt(sigmaSq))
    y[x >= lower_bound | x <= -lower_bound] <- NA
    return(y)
}

xMin = mu - sqrt(sigmaSq)*4
xMax = mu + sqrt(sigmaSq)*4
outPlot = ggplot(data.frame(x = c(xMin, xMax)), aes(x = x)) + 
    stat_function(fun = dnorm, args = list(mean = mu, sd = sqrt(sigmaSq))) + 
    stat_function(fun = funcShaded, args = list(lower_bound = 1), 
                  geom = "area", fill = 'lightblue', alpha = .5) +
    scale_x_continuous(name = lab) + scale_y_continuous(name = "f(x)")
outPlot
```
:::

::: {.column width="33%"}
```{r}
#| label: normalEmpRuleGeneral2
#| echo: false
#| fig-asp: 1
#| out-width: "100%"

outPlot = ggplot(data.frame(x = c(xMin, xMax)), aes(x = x)) + 
    stat_function(fun = dnorm, args = list(mean = mu, sd = sqrt(sigmaSq))) + 
stat_function(fun = funcShaded, args = list(lower_bound = 2), 
                  geom = "area", fill = 'lightgreen', alpha = .5)  +
    scale_x_continuous(name = lab) + scale_y_continuous(name = "f(x)")
outPlot
```
:::

::: {.column width="33%"}
```{r}
#| label: normalEmpRuleGeneral3
#| echo: false
#| fig-asp: 1
#| out-width: "100%"

outPlot = ggplot(data.frame(x = c(xMin, xMax)), aes(x = x)) + 
    stat_function(fun = dnorm, args = list(mean = mu, sd = sqrt(sigmaSq))) + 
stat_function(fun = funcShaded, args = list(lower_bound = 3), 
                  geom = "area", fill = 'lightcoral', alpha = .5)   +
    scale_x_continuous(name = lab) + scale_y_continuous(name = "f(x)")
outPlot
```
:::
::::::

```{=html}
<!--
-   [$P( |X - \mu| \leq \sigma) = 0.683$]{.lightbluetext}
-   [$P( |X - \mu| \leq 2\sigma) = 0.954$]{.lightgreentext}
-   [$P( |X - \mu| \leq 3\sigma) = 0.997$]{.lightredtext}
:::
-->
```

<!-- ::: {.column width="10%"} -->

<!-- empty column to create gap -->

<!--::: -->

```{=html}
<!--
::: {.column width="50%"}
-   $P( |Z| \leq 1) = 0.683$
-   $P( |Z| \leq 2) = 0.954$
-   $P( |Z| \leq 3) = 0.997$
:::
::::::
-->
```

## A (potentially) helpful applet {.scrollable}

![](figures/appletScott.png){width="75%" fig-alt="Screenshot of web applet for computing probabilities and values from the normal and t distribution"}



Here is a link: [Probability applet](https://people.tamu.edu/~scottcrawford/ftable.html){.external target="_blank"}

Returning to SAT example:

```{r SATprobRevisit}
#| echo: true
x       = 600
mu      = 520
sigmaSq = 3600
pnorm(x, mu, sqrt(sigmaSq))
qnorm(.96, mu, sqrt(sigmaSq))
```

To use the applet

-   [Probability:]{.smallCap} we need the z-score = `r (600 - 520)/sqrt(sigmaSq)`
-   [Value:]{.smallCap} We need to unstandardize to get value.

```{r SATvalueRevisit}
#| echo: true
1.751*sqrt(sigmaSq) + mu
```

## We'll be back...

The normal plays a [central]{.emphasis} role in probability and statistics

We will return to it later during [sampling distributions]{.smallCap}...
