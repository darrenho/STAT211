---
title: "STAT 211: Normal Distribution"
subtitle: "Computing probabilities and quantiles from this important distribution"
---

```{r loadPacks}
#| echo: false
require(ggplot2)
```

## The Normal Distribution

The [normal]{.definition} (also known as 'Gaussian') is $X\sim N(\mu,\sigma^2)$:

-   $\mu$ is the expected value ($E[X]$)
-   $\sigma^2$ is the variance of (Var$[X]$)

Its pdf: $$ 
f(x)=\frac1{(2\pi\sigma^2)^{1/2}}e^{-\frac{(x-\mu)^2}{2\sigma^2}} 
$$

[(Just like the binomial, you don't need to know this formula for this class)]{.subscript}

## The Normal Distribution {.scrollable}

Computing probabilities with the normal **requires** computers

Luckily, we already know the general idea...

![](figures/normalTable.png){fig-align="left" width="100%" fig-alt="Standard Normal Table for getting probabilities from Z-scores"}

```{r}
#| echo: true
pnorm(1.8,0,1)
pnorm(1.89,0,1)
```

## Computing probabilities for the normal

We will always write $X\sim N(\mu,\sigma^2)$ for the normal

R syntax will be specified with $\mu$ and $\sigma = \sqrt{\sigma^2}$ instead

[Example]{.example}

If $X \sim N(5,9)$, then the probability $X$ is less than 4 is:

``` {.r code-line-numbers="1|2-3|4"}
x       = 4
mu      = 5
sigmaSq = 9
pnorm(x, mu, sqrt(sigmaSq))
```

```{r introNormalProb}
#| echo: false
x       = 4
mu      = 5
sigmaSq = 9
pnorm(x, mu, sqrt(sigmaSq))
```

## Computing values for the normal {.scrollable}

Continuing with $X \sim N(5,9)$, we found that $P(X < 4)$ is:

```{r}
#| echo: true
pnorm(4,5,3)
```

```{r}
#| label: normalProbPlot
#| echo: false
#| fig-asp: 1
#| out-width: "50%" 
x       = 4
mu      = 5
sigmaSq = 9
lab     = 'x'

funcShaded <- function(x, lower_bound) {
    y = dnorm(x, mean = mu, sd = sqrt(sigmaSq))
    y[x >= lower_bound] <- NA
    return(y)
}

xMin = mu - sqrt(sigmaSq)*4
xMax = mu + sqrt(sigmaSq)*4
ggplot(data.frame(x = c(xMin, xMax)), aes(x = x)) + 
    stat_function(fun = dnorm, args = list(mean = mu, sd = sqrt(sigmaSq))) + 
    stat_function(fun = funcShaded, args = list(lower_bound = x), 
                  geom = "area", fill = 'lightblue', alpha = .5) +
    scale_x_continuous(name = lab) + scale_y_continuous(name = "f(x)")
```

. . .

Now, let's ask the **opposite** question: at what value $x$ does $P(X\leq x) = .7$? .

```{r}
#| echo: true
qnorm(.7,5,3)
```

This is called a [quantile]{.definition} of the normal

```{r}
#| label: normalQuantilePlot
#| echo: false
#| fig-asp: 1
#| out-width: "50%" 
x   = qnorm(.7,mu,sqrt(sigmaSq))
lab = 'x' 

funcShaded <- function(x, lower_bound) {
    y = dnorm(x, mean = mu, sd = sqrt(sigmaSq))
    y[x >= lower_bound] <- NA
    return(y)
}

xMin = mu - sqrt(sigmaSq)*4
xMax = mu + sqrt(sigmaSq)*4
ggplot(data.frame(x = c(xMin, xMax)), aes(x = x)) + 
    stat_function(fun = dnorm, args = list(mean = mu, sd = sqrt(sigmaSq))) + 
    stat_function(fun = funcShaded, args = list(lower_bound = x), 
                  geom = "area", fill = 'lightblue', alpha = .5) +
    scale_x_continuous(name = lab) + scale_y_continuous(name = "f(x)")
```

. . .

[Concept Check:]{.example} What would this code resolve to:

```{r}
#| echo: true
#| eval: false
qnorm( pnorm(3,5,3), 5,3)
```

. . .

```{r}
#| echo: false
#| eval: true
qnorm( pnorm(3,5,3), 5,3)
```

. . .

```{r}
#| echo: true
#| eval: false
pnorm(qnorm(.2,5,3), 5, 3)
```

. . .

```{r}
#| echo: false
#| eval: true
pnorm(qnorm(.2,5,3), 5, 3)
```

## Computing probabilities and values {.scrollable}

Suppose $X \sim N(-3.2, 100)$

[Probability:]{.smallCap} What is the probability $X$ is less than 0?

. . .

```{r}
#| echo: true
pnorm(0,3.2,sqrt(100))
```

. . .

[Values:]{.smallCap} at what value $x$ does $P(X\leq x) = .05$? . . .

```{r}
#| echo: true
qnorm(.05,-3.2,sqrt(100))
```

## Computing probabilities: SATs {.scrollable}

[Example]{.example}

Suppose that the scores on the SAT math section are normally distributed with an expected value of 520 and a variance of 3600 (that is, $X \sim N(520,3600)$)

What is the probability someone scores less than 600?

. . .

```{r}
#| label: SATquationNoEcho
#| echo: false
#| fig-asp: 1
#| out-width: "50%" 
x       = 600
mu      = 520
sigmaSq = 3600

funcShaded <- function(x, lower_bound) {
    y = dnorm(x, mean = mu, sd = sqrt(sigmaSq))
    y[x >= lower_bound] <- NA
    return(y)
}

xMin = 350
xMax = 700
ggplot(data.frame(x = c(xMin, xMax)), aes(x = x)) + 
    stat_function(fun = dnorm, args = list(mean = mu, sd = sqrt(sigmaSq))) + 
    stat_function(fun = funcShaded, args = list(lower_bound = x), 
                  geom = "area", fill = 'lightblue', alpha = .5) +
    scale_x_continuous(name = "Score") + scale_y_continuous(name = "f(x)")
```

. . .

```{r SATprobEcho}
#| echo: true
x       = 600
mu      = 520
sigmaSq = 3600
pnorm(x, mu, sqrt(sigmaSq))
```

## Computing values: SATs {.scrollable}

[Example]{.example}

Suppose that the scores on the SAT math section are normally distributed with an expected value of 520 and a variance of 3600

[(that is, $X \sim N(520,3600)$)]{.subscript}

The stats dept. identifies students scoring at or above 96% for recruitment

What is the cutoff score ($x$) for recruitment by the stats dept.?

. . .

$P(X \leq x) = 0.96$

. . .

```{r SATvalueEcho}
#| echo: true
prob    = .96
mu      = 520
sigmaSq = 3600
qnorm(prob, mu, sqrt(sigmaSq))
```

```{=html}
<!--
To Future Darren: Put this after we introduce correlation
## Properties of Normal Distribution

A [linear combination]{.definition} comes from 'summing' 'products', like:

$$
3x + 4y + 5z
$$

We can form [linear combinations]{.definition} of rvs too

In particular, any linear combination of Normal rvs is again a Normal:
-->
```

## Transforming Normals: $aX + b$ {#transformingNormals}

Suppose again $X \sim N(\mu, \sigma^2)$

If we multiply/add constants $a,b$ to $X$ to form a new rv $Y$:

$$
Y  = aX + b 
$$ then $Y \sim(a\mu + b, a^2 \sigma^2)$

[(This should remind you of our $E[X]$ and $Var[X]$ results)]{.subscript}

[Example:]{.example}

If $X \sim N(150,100)$ then

$$
Y = 3X + 30 \sim N(480, 900)
$$

## Transforming Normals: inches to cm {.scrollable}

<!-- add a picture of measuring a gauge block using a ruler -->

We are measuring a standard inch using a ruler with a fine scale

If several people measure, they will get some random amount of measurement error:

$$
X \sim N(1, .000001)
$$

What is the probability that that a measurement will be within $\pm$.001 centimeters?

[(An inch is 2.54 cm)]{.subscript}

. . .

$Y = 2.54X$, therefore $Y \sim$ . . . $N(2.54,  2.54^2*.000001)$

. . .

$$
\begin{align}
P(1 - .001 \leq Y \leq 1 + .001) & = P(.999 \leq Y \leq 1.001) \\
& = F(1.001) - F(.999)
\end{align}
$$ . . .

```{r transformNormalInchCM}
#| echo: true
mu      = 1
sigmaSq = 2.54^2*.000001
pnorm(1.001, mu, sqrt(sigmaSq)) - 
    pnorm(.999, mu, sqrt(sigmaSq))
```

## The Standard Normal Distribution {.scrollable}

When $\mu=0$ and $\sigma=1$, we call it the [standard normal]{.definition}

$$
        f(x)=\frac1{\sqrt{2\pi}}e^{-x^2/2},\,\,-\infty<x<\infty.
$$

[(Once again, you don't need to know this formula for this class)]{.subscript}

The standard normal will be notated as: $Z \sim N(0,1)$

. . .

Going from a general normal to a standard normal is known as [standardization]{.definition}

$$
X \sim N(\mu, \sigma^2) \longrightarrow Z = \frac{X - \mu}{\sigma} \sim N(0,1)
$$ The opposite (actually, the [inverse]{.definition}) is true 

$$
Z \sim N(0, 1) \longrightarrow X = Z \sigma + \mu \sim N(\mu,\sigma^2)
$$ 

@transformingNormals

[(this is using the results @transformingNormals "Transforming Normals")]{.subscript}

<!--
\begin{figure}
\includegraphics[width=2in,trim = 0 0 0 50,clip]{./figures/normalStandard} 
\includegraphics[width=2in]{./figures/normalR} 
\end{figure}
--> <!--
## The Standard Normal Distribution}
%\smallCapGreen{Reminder:}  

Starting from the general normal, how can we generate a 
standard normal?

\script{That is, go from $X \sim N(\mu, \sigma^2)$ to $Z \sim N(0,1)$}



. . .
Suppose I wrote $Y = X - \mu$, what would be its expected value?

. . .
$$
E[Y] = E[X] - \mu = \mu - \mu = 0
$$

. . .
Likewise, if I wrote $Y = \frac{X}{\sigma} - \frac{\mu}{\sigma}$, what would be its variance?

. . .
$$
Var[Y] = \frac{Var[X]}{\sigma^2} = \frac{\sigma^2}{\sigma^2} = 1
$$

%
So, $Z = (X-\mu)/\sigma \sim N(0,1)$




## The Standard Normal Distribution}

\smallCapGreen{Conclusion:} We can standardize the general normal ($X \sim N(\mu,\sigma^2)$) via
$$
Z = \frac{X - \mu}{\sigma}  \sim N(0,1)
$$
. . . 

We can go the opposite direction as well..
$$
X = \sigma Z + \mu \sim N(\mu,\sigma^2)
$$



## Back to the Example}

\begin{figure}
\includegraphics[width=3cm,trim = 0 0 0 50,clip]{./figures/normalSAT} 
\includegraphics[width=3cm,trim = 0 0 0 50,clip]{./figures/normalStandard} 
\end{figure}
         
We wrote that $X\sim N(520,3600)$ to be the SAT score


We wanted  $P(X \leq 600)$


This is the same as  $P(Z \leq (600 - 520)/60)$

\script{(600 - 520)/60 = 1.3333}


$P(Z \leq 1.3333)$ is ..



\alr{pnorm((600 - 520)/60)}



\alr{[1] 0.9087888}



-->

## Z-scores: Comparing values {.scrollable}

Sometimes we will be tasked with comparing values from two different distributions

[Goal:]{.smallCap} Which value is more [extreme]{.emphasis}?

[Example:]{.example} 

## Empirical rule {.scrollable}

Values from normal distributions contain predictable amounts of probability

[(This is sometimes known as the ]{.subscript}[empirical rule]{.definition})

:::::: columns
::: {.column width="50%"}
```{r}
#| label: normalEmpRuleGeneral
#| echo: false
#| fig-asp: 1
#| out-width: "50%"

mu      = 0
sigmaSq = 1
lab     = 'x' 

funcShaded <- function(x, lower_bound) {
    y = dnorm(x, mean = mu, sd = sqrt(sigmaSq))
    y[x >= lower_bound | x <= -lower_bound] <- NA
    return(y)
}

xMin = mu - sqrt(sigmaSq)*4
xMax = mu + sqrt(sigmaSq)*4
ggplot(data.frame(x = c(xMin, xMax)), aes(x = x)) + 
    stat_function(fun = dnorm, args = list(mean = mu, sd = sqrt(sigmaSq))) + 
    stat_function(fun = funcShaded, args = list(lower_bound = 3), 
                  geom = "area", fill = 'lightcoral', alpha = .5) +
    stat_function(fun = funcShaded, args = list(lower_bound = 2), 
                  geom = "area", fill = 'lightgreen', alpha = .5) +
    stat_function(fun = funcShaded, args = list(lower_bound = 1), 
                  geom = "area", fill = 'lightblue', alpha = .5) +
    scale_x_continuous(name = lab) + scale_y_continuous(name = "f(x)")
```

-   [$P( |X - \mu| \leq \sigma) = 0.683$]{.lightbluetext}
-   [$P( |X - \mu| \leq 2\sigma) = 0.954$]{.lightgreentext}
-   [$P( |X - \mu| \leq 3\sigma) = 0.997$]{.lightredtext}
:::

::: {.column width="10%"}
<!-- empty column to create gap -->
:::

::: {.column width="50%"}
-   $P( |Z| \leq 1) = 0.683$
-   $P( |Z| \leq 2) = 0.954$
-   $P( |Z| \leq 3) = 0.997$
:::
::::::

## We'll be back...

The normal plays a [central]{.emphasis} role in probability and statistics

We will return to it in Chapter 5..
